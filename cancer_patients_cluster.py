# -*- coding: utf-8 -*-
"""Cancer_Patients_Cluster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q-QYsEPRifJNG7fDOkoOpCILq831seR9
"""

from sys import ps1
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import joblib
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)
import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings("ignore")
from sklearn.decomposition import PCA
! pip install umap-learn
import umap
import plotly.graph_objs as go
import plotly.figure_factory as ff
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, DBSCAN



# Importing dataset and examining it
data = pd.read_csv("/content/drive/MyDrive/SEER.csv")
pd.set_option('display.max_columns', None)
print(data.head())
print(data.shape)
print(data.info())
print(data.describe())


# Mapping categorical columns to numbers where they can be arrangend in a mathematical order 
data['T Stage '] = data['T Stage '].map({'T1':0, 'T2':1,'T3':2,'T4':3})
data['N Stage'] = data['N Stage'].map({'N1':0, 'N2':1,'N3':2})
data['6th Stage'] = data['6th Stage'].map({'IIA':0, 'IIB':1,'IIIA':2,'IIIB':3,'IIIC':4})
data['Grade'] = data['Grade'].map({'Well differentiated; Grade I':0, 'Moderately differentiated; Grade II':1,'Poorly differentiated; Grade III':2,'Undifferentiated; anaplastic; Grade IV':3})
data['A Stage'] = data['A Stage'].map({'Regional':0, 'Distant':1})
data['Estrogen Status'] = data['Estrogen Status'].map({'Positive':0, 'Negative':1})
data['Progesterone Status'] = data['Progesterone Status'].map({'Positive':0, 'Negative':1})
data['Status'] = data['Status'].map({'Alive':1, 'Dead':0})
print(data.info())




# Dropping irrelevant columns
dataset = data.drop(['Race ','Marital Status'], axis = 1) 

### Defining the Significant Variables for visualization
V = dataset[['Survival Months', 'Age', 'Tumor Size', 'Status','Grade','Reginol Node Positive','Regional Node Examined','6th Stage','T Stage ']]

# Normalizing
scaler = StandardScaler()
scaledV = scaler.fit_transform(V)


# # Implementing UMAP to visualize dataset
Umap = umap.UMAP(n_components=2,n_neighbors=130, min_dist=0.4)
V_umap = Umap.fit_transform(scaledV)
# Implementing DBSCAN
dbscan = DBSCAN(eps=0.4, min_samples=9) 
dbscan.fit(V_umap)      

### Defining The list of variables to get text information on hovering over datapoints###
T=list(dataset['Tumor Size'])
S=list(dataset['Status'])
SM = list(dataset['Survival Months'])
A= list(dataset["Age"])
G = list(dataset["Grade"])
RP = list(dataset["Reginol Node Positive"])
RE= list(dataset["Regional Node Examined"])
Six= list(dataset['6th Stage'])
N = list(dataset['N Stage'])
TS = list(dataset['T Stage '])
AS = list(dataset["A Stage"])


#dbscan.labels_
data = [go.Scatter(x=V_umap[:,0], y=V_umap[:,1], mode='markers',
                    marker = dict(color=dataset['Status'], colorscale='spectral', opacity=0.5),
                                text=[f'TumorSize: {a}; Status: {b}; SurvivalMonths:{c}; Age:{d}; Grade:{e}; ReginolNodePositive:{f}; RegionalNodeExamined:{g}; 6thStage:{h}; NStage:{i}; TStage:{j}; AStage:{k}' for a,b,c,d,e,f,g,h,i,j,k in list(zip(T,S,SM,A,G,RP,RE,Six,N,TS,AS))],
                                hoverinfo='text')]

layout = go.Layout(title = 'UMAP Dimensionality Reduction', width = 950, height = 950,
                    xaxis = dict(title='First Dimension'),
                    yaxis = dict(title='Second Dimension'))
fig = go.Figure(data=data, layout=layout)
fig.show()

from google.colab import drive
drive.mount('/content/drive')